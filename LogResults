# Generated by chatgpt + modified
import os
import csv

def create_results_files(eval_results_filename, master_log="training_results.csv"):
    """
    Creates two CSV files:
    1. A new unique results file for this run (with header).
    2. A master log file that is always appended to (header written only if new).

    Returns
    -------
    run_writer : csv.writer
        CSV writer for the run file.
    run_file : file object
        Open handle for the run file (caller must close).
    log_writer : csv.writer
        CSV writer for the master log (append mode).
    log_file : file object
        Open handle for the log file (caller must close).
    """
    # Ensure directory exists
    output_dir = r'C:\Users\nat\PycharmProjects\PythonProject\utils\results'
    os.makedirs(output_dir, exist_ok=True)

    # ---- Current run results (write mode) ----
    # - Contains all word predictions for that run + the suggested target word + evaluation decision

    # Check if the filename already exists, if so then add a value to make unique
    run_filepath = os.path.join(output_dir, eval_results_filename)
    base, ext = os.path.splitext(run_filepath)
    counter = 1
    while os.path.exists(run_filepath):
        run_filepath = f"{base}_{counter}{ext}"
        counter += 1

    # Write headers to the file, and keep open to write to later
    run_file = open(run_filepath, mode="w", newline="")
    run_writer = csv.writer(run_file)
    run_writer.writerow(["prediction", "target", "result", "score"])  # header
    print(f"Created run file: {run_filepath}")

    # ---- Master log file (append mode) ----
    # - Contains all setup vars + training performance (epochs loss) + eval performance results

    # Open file or create if new
    log_filepath = os.path.join(output_dir, master_log)
    new_file = not os.path.exists(log_filepath)
    log_file = open(log_filepath, mode="a", newline="")
    log_writer = csv.writer(log_file)

    # If file is new then write a header
    if new_file:
        log_writer.writerow(["max_context_length", "control_data", "aphasia_data", "learning rate", "batch_size",
                             "epoch1", "epoch2", "epoch3",
                             "correct_count", "total_count", "exact_match", "syn_match", "accuracy"])
        print(f"Created master log: {log_filepath}")
    else:
        print(f"Appending to master log: {log_filepath}")


    return run_writer, run_file, log_writer, log_file
